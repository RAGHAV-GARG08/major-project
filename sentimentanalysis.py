# -*- coding: utf-8 -*-
"""sentimentanalysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o7oMDo74v2AZ0IXC73pfKv9jptBx_tLU
"""



"""# **Sentiment Analysis on Hotel Reviews**

**Gathering data**
"""

# Kaggle link
# https://www.kaggle.com/anu0012/hotel-review/data

import pandas as pd 
review = pd.read_csv('/content/drive/MyDrive/smartknower/major project/train.csv')
review.head()

pd.show_versions()

review.shape

"""**Bar graph** """

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline
review.Is_Response.value_counts().plot(kind='bar')
plt.show()

"""**Removing unnecessary columns**"""

review.drop(columns = ['User_ID', 'Browser_Used', 'Device_Used'], inplace = True)

"""**Data Cleaning**"""

import re
import string
def dataCleaning(text):
    text = text.lower()
    text = re.sub('\[.*?\]', '', text)
    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)
    text = re.sub('\w*\d\w*', '', text)
    text = re.sub('[‘’“”…]', '', text)
    text = re.sub('\n', '', text)
    return text

"""**Updating the dataframe**"""

review['Description'] = pd.DataFrame(review.Description.apply(lambda x: dataCleaning(x)))
review.head(10)

"""**Splitting data**"""

from sklearn.model_selection import train_test_split
X = review.Description
Y = review.Is_Response
x_train, x_test, y_train, y_test = train_test_split(X,Y, test_size = 0.2, random_state = 25)

"""**Training and testing of the model**"""

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import Pipeline

model = Pipeline([('vectorizer',TfidfVectorizer()),('classifier',LogisticRegression())])
model.fit(x_train, y_train)
y_pred = model.predict(x_test)

"""**Accuracy score**"""

from sklearn.metrics import accuracy_score
print("Accuracy : ", accuracy_score(y_pred, y_test))

"""**Confusion matrix**"""

from sklearn.metrics import confusion_matrix
confusion_matrix(y_pred, y_test)

"""**Plotting the confusion matrix**"""

from sklearn.metrics import plot_confusion_matrix
plot_confusion_matrix(model, x_test, y_test)

"""**Classification report**"""

from sklearn.metrics import classification_report
print(classification_report(y_pred, y_test))

"""**Testing the model**"""

example = ["I'm satisfied"]
result = model.predict(example)

print(result)

"""**Save the model**"""

import joblib
joblib.dump(model,'sentiment')

"""**Installing necessary libraries**"""

!pip install streamlit --quiet
!pip install pyngrok==4.1.1
from pyngrok import ngrok

"""**Writing app.py**"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import joblib
# model = joblib.load('sentiment')
# st.title('Sentiment Analysis')
# ip = st.text_input("Enter the review")
# op = model.predict([ip])
# if st.button('Predict'):
#   st.title(op[0])
#

"""**Running app.py**"""

!nohup streamlit run app.py &
url = ngrok.connect(port='8501')
url

